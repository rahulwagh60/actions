name: YAML Encryption Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'secret/**/*.yaml'
      - 'secret/**/*.yml'
      - '**/*.yaml'
      - '**/*.yml'
  workflow_dispatch:  # Allow manual triggers for testing

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  check-yaml-encryption:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Debug context
      run: |
        echo "Event name: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "SHA: ${{ github.sha }}"
        echo "PR number: ${{ github.event.pull_request.number }}"
        echo "PR head SHA: ${{ github.event.pull_request.head.sha }}"
        echo "Base SHA: ${{ github.event.pull_request.base.sha }}"
    
    - name: Get changed files in PR
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Get files changed in the PR (added, modified, renamed)
          CHANGED_FILES=$(git diff --name-only --diff-filter=AMR ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -E '^secret/.*\.(yaml|yml)$' || true)
        else
          # For workflow_dispatch, check all files in secret folder
          CHANGED_FILES=$(find secret -name "*.yaml" -o -name "*.yml" 2>/dev/null || true)
        fi
        
        echo "Changed YAML files in secret folder:"
        echo "$CHANGED_FILES"
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "has_changed_files=true" >> $GITHUB_OUTPUT
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Export for use in script
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "has_changed_files=false" >> $GITHUB_OUTPUT
          echo "No YAML files changed in secret folder"
        fi
    
    - name: Create encryption check script for changed files
      if: steps.changed-files.outputs.has_changed_files == 'true'
      run: |
        cat > check-yaml-encryption-pr.sh << 'EOF'
        #!/bin/bash
        
        # Initialize counters
        ENCRYPTED_COUNT=0
        UNENCRYPTED_COUNT=0
        UNENCRYPTED_FILES=""
        
        # Read changed files from environment
        while IFS= read -r file; do
          if [ -n "$file" ] && [ -f "$file" ]; then
            echo "üîç Checking: $file"
            
            # Get file type using file command
            FILE_TYPE=$(file -b "$file" 2>/dev/null || echo "unknown")
            echo "   File type: $FILE_TYPE"
            
            # Check if file is encrypted using multiple methods
            IS_ENCRYPTED=false
            
            # Method 1: Check file type for binary/encrypted indicators
            if echo "$FILE_TYPE" | grep -qi "data\|encrypted\|binary\|gzip\|compressed"; then
              echo "   ‚úÖ Detected as encrypted by file type: $FILE_TYPE"
              IS_ENCRYPTED=true
            fi
            
            # Method 2: Check for specific encryption markers
            if grep -q "^\$ANSIBLE_VAULT" "$file" 2>/dev/null; then
              echo "   ‚úÖ Ansible Vault encryption detected"
              IS_ENCRYPTED=true
            elif grep -q "^ansible-vault" "$file" 2>/dev/null; then
              echo "   ‚úÖ Ansible Vault encryption detected (alternative format)"
              IS_ENCRYPTED=true
            elif grep -q "sops:" "$file" 2>/dev/null; then
              echo "   ‚úÖ SOPS encryption detected"
              IS_ENCRYPTED=true
            elif grep -q "age:" "$file" 2>/dev/null; then
              echo "   ‚úÖ AGE encryption detected"
              IS_ENCRYPTED=true
            elif grep -q "pgp:" "$file" 2>/dev/null; then
              echo "   ‚úÖ PGP encryption detected"
              IS_ENCRYPTED=true
            elif grep -q "BEGIN PGP MESSAGE\|BEGIN ENCRYPTED MESSAGE" "$file" 2>/dev/null; then
              echo "   ‚úÖ PGP/Encrypted message format detected"
              IS_ENCRYPTED=true
            elif grep -q "-----BEGIN PGP MESSAGE-----" "$file" 2>/dev/null; then
              echo "   ‚úÖ PGP message block detected"
              IS_ENCRYPTED=true
            elif grep -q "ENC\[" "$file" 2>/dev/null; then
              echo "   ‚úÖ ENC[] encryption marker detected"
              IS_ENCRYPTED=true
            fi
            
            # Method 3: Check if file contains mostly non-printable characters (likely encrypted)
            if [ "$IS_ENCRYPTED" = false ]; then
              # Sample first 1000 characters and check if they're mostly printable
              SAMPLE=$(head -c 1000 "$file" 2>/dev/null || true)
              if [ -n "$SAMPLE" ]; then
                # Count printable vs non-printable characters
                PRINTABLE_COUNT=$(echo -n "$SAMPLE" | tr -cd '[:print:][:space:]' | wc -c)
                TOTAL_COUNT=$(echo -n "$SAMPLE" | wc -c)
                
                if [ "$TOTAL_COUNT" -gt 0 ]; then
                  PRINTABLE_RATIO=$((PRINTABLE_COUNT * 100 / TOTAL_COUNT))
                  echo "   Printable character ratio: ${PRINTABLE_RATIO}%"
                  
                  # If less than 80% of characters are printable, likely encrypted
                  if [ "$PRINTABLE_RATIO" -lt 80 ]; then
                    echo "   ‚úÖ Detected as encrypted (low printable character ratio)"
                    IS_ENCRYPTED=true
                  fi
                fi
              fi
            fi
            
            # Final determination
            if [ "$IS_ENCRYPTED" = true ]; then
              echo "‚úÖ RESULT: $file is ENCRYPTED"
              ENCRYPTED_COUNT=$((ENCRYPTED_COUNT + 1))
            else
              echo "‚ùå RESULT: $file is NOT ENCRYPTED"
              UNENCRYPTED_COUNT=$((UNENCRYPTED_COUNT + 1))
              if [ -z "$UNENCRYPTED_FILES" ]; then
                UNENCRYPTED_FILES="$file"
              else
                UNENCRYPTED_FILES="$UNENCRYPTED_FILES"$'\n'"$file"
              fi
            fi
            echo ""
          fi
        done <<< "$CHANGED_FILES"
        
        # Export results to GitHub environment
        echo "ENCRYPTED_COUNT=$ENCRYPTED_COUNT" >> $GITHUB_ENV
        echo "UNENCRYPTED_COUNT=$UNENCRYPTED_COUNT" >> $GITHUB_ENV
        
        if [ $UNENCRYPTED_COUNT -gt 0 ]; then
          echo "UNENCRYPTED_FILES<<EOF" >> $GITHUB_ENV
          echo "$UNENCRYPTED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        echo "=== Changed Files Encryption Check Results ==="
        echo "Files processed: $((ENCRYPTED_COUNT + UNENCRYPTED_COUNT))"
        echo "Encrypted: $ENCRYPTED_COUNT"
        echo "Unencrypted: $UNENCRYPTED_COUNT"
        
        # Exit with error if unencrypted files found
        if [ $UNENCRYPTED_COUNT -gt 0 ]; then
          echo "‚ùå Found unencrypted files in secret folder"
          exit 1
        else
          echo "‚úÖ All changed files are encrypted"
          exit 0
        fi
        EOF
        
        chmod +x check-yaml-encryption-pr.sh
      
    - name: Run YAML encryption check on changed files
      if: steps.changed-files.outputs.has_changed_files == 'true'
      id: encryption-check
      run: |
        ./check-yaml-encryption-pr.sh
        echo "script_exit_code=$?" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Set PR variables
      id: pr-info
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "head_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "is_pr=true" >> $GITHUB_OUTPUT
        else
          echo "head_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "is_pr=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create PR comment for encrypted files
      if: env.UNENCRYPTED_COUNT == '0' && env.ENCRYPTED_COUNT != '0' && steps.pr-info.outputs.is_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üîí YAML Encryption Check - PASSED ‚úÖ
          
          All changed YAML files in the \`secret\` folder are properly encrypted!
          
          **Summary:**
          - üìÅ Changed encrypted files: ${process.env.ENCRYPTED_COUNT}
          - ‚úÖ All changed files are secure
          
          The pull request can be safely merged. üöÄ`;
          
          await github.rest.issues.createComment({
            issue_number: ${{ steps.pr-info.outputs.pr_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Create PR comment for unencrypted files
      if: env.UNENCRYPTED_COUNT != '0' && steps.pr-info.outputs.is_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const unencryptedFiles = process.env.UNENCRYPTED_FILES || '';
          const filesList = unencryptedFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n');
          
          const comment = `## üö® YAML Encryption Check - FAILED ‚ùå
          
          **Security Warning:** Unencrypted YAML files detected in changed files within the \`secret\` folder!
          
          **Summary:**
          - üìÅ Total changed files checked: ${parseInt(process.env.ENCRYPTED_COUNT || '0') + parseInt(process.env.UNENCRYPTED_COUNT || '0')}
          - ‚úÖ Encrypted files: ${process.env.ENCRYPTED_COUNT || '0'}
          - ‚ùå **Unencrypted files: ${process.env.UNENCRYPTED_COUNT || '0'}**
          
          **Unencrypted files found in this PR:**
          ${filesList}
          
          **‚ö†Ô∏è Action Required:**
          Please encrypt these files before merging this pull request. Files in the \`secret\` folder should always be encrypted for security purposes.
          
          **How to fix:**
          1. Encrypt the files using your preferred encryption method (ansible-vault, sops, etc.)
          2. Push the encrypted files to this branch
          3. The check will run automatically again
          
          **üîí Merge is currently blocked until all files are encrypted.**`;
          
          await github.rest.issues.createComment({
            issue_number: ${{ steps.pr-info.outputs.pr_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Block merge if unencrypted files found
      if: env.UNENCRYPTED_COUNT != '0'
      uses: actions/github-script@v7
      with:
        script: |
          // Create a check run that fails, which will block merge
          const checkRun = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'YAML Encryption Validation',
            head_sha: '${{ steps.pr-info.outputs.head_sha }}',
            status: 'completed',
            conclusion: 'failure',
            output: {
              title: 'Unencrypted YAML files detected in PR changes',
              summary: `Found ${process.env.UNENCRYPTED_COUNT} unencrypted YAML files in the changed files of this PR.`,
              text: `The following changed files need to be encrypted:\n\n${process.env.UNENCRYPTED_FILES || 'No files listed'}`
            }
          });
          
          // Also set the action as failed
          core.setFailed(`Found ${process.env.UNENCRYPTED_COUNT} unencrypted YAML files in changed files`);
    
    - name: Success check for encrypted files
      if: env.UNENCRYPTED_COUNT == '0' && env.ENCRYPTED_COUNT != '0'
      uses: actions/github-script@v7
      with:
        script: |
          // Create a successful check run
          const checkRun = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'YAML Encryption Validation',
            head_sha: '${{ steps.pr-info.outputs.head_sha }}',
            status: 'completed',
            conclusion: 'success',
            output: {
              title: 'All changed YAML files are encrypted',
              summary: `Successfully verified ${process.env.ENCRYPTED_COUNT} encrypted YAML files in PR changes.`,
              text: 'All changed YAML files in the secret folder are properly encrypted. ‚úÖ'
            }
          });
    
    - name: Handle no changed YAML files case
      if: steps.changed-files.outputs.has_changed_files == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          // Only comment if this is a pull request
          if ('${{ steps.pr-info.outputs.is_pr }}' === 'true') {
            const comment = `## üîç YAML Encryption Check - NO CHANGED FILES ‚ÑπÔ∏è
            
            No YAML files were changed in the \`secret\` folder for this pull request.
            
            The encryption check only validates files that are added, modified, or renamed in the PR.`;
            
            await github.rest.issues.createComment({
              issue_number: ${{ steps.pr-info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
          
          // Create a neutral check run
          const checkRun = await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'YAML Encryption Validation',
            head_sha: '${{ steps.pr-info.outputs.head_sha }}',
            status: 'completed',
            conclusion: 'neutral',
            output: {
              title: 'No changed YAML files to check',
              summary: 'No YAML files changed in the secret folder for this PR.',
              text: 'This PR does not contain any changes to YAML files in the secret folder.'
            }
          });
    
    - name: Summary
      run: |
        echo "=== YAML Encryption Check Summary ==="
        if [ "${{ steps.changed-files.outputs.has_changed_files }}" = "true" ]; then
          echo "Changed encrypted files: ${ENCRYPTED_COUNT:-0}"
          echo "Changed unencrypted files: ${UNENCRYPTED_COUNT:-0}"
          echo "Check result: ${{ steps.encryption-check.outputs.script_exit_code == '0' && 'PASSED' || 'FAILED' }}"
          
          if [ "${UNENCRYPTED_COUNT:-0}" != "0" ]; then
            echo "‚ö†Ô∏è Action failed due to unencrypted files in PR changes"
            exit 1
          fi
        else
          echo "No YAML files changed in secret folder"
        fi

  validate-kubernetes-yaml:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up kubeval
      run: |
        # Download and install kubeval
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin/
        chmod +x /usr/local/bin/kubeval
        
        # Verify installation
        kubeval --version
    
    - name: Get changed Kubernetes YAML files in PR
      id: changed-k8s-files
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Get files changed in the PR (added, modified, renamed)
          ALL_CHANGED_FILES=$(git diff --name-only --diff-filter=AMR ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -E '\.(yaml|yml)$' || true)
        else
          # For workflow_dispatch, check all YAML files
          ALL_CHANGED_FILES=$(find . -name "*.yaml" -o -name "*.yml" | head -50)
        fi
        
        echo "All changed YAML files:"
        echo "$ALL_CHANGED_FILES"
        
        # Filter for Kubernetes files
        K8S_FILES=""
        
        for file in $ALL_CHANGED_FILES; do
          if [ -f "$file" ] && [ -r "$file" ]; then
            # Check if file contains Kubernetes resource indicators or has k8s-related path
            if echo "$file" | grep -qE "(k8s|kubernetes|manifests|deployment|service|ingress|configmap)" || \
               grep -l "apiVersion:\|kind:" "$file" >/dev/null 2>&1; then
              echo "Found changed K8s resource file: $file"
              if [ -z "$K8S_FILES" ]; then
                K8S_FILES="$file"
              else
                K8S_FILES="$K8S_FILES"$'\n'"$file"
              fi
            fi
          fi
        done
        
        if [ -n "$K8S_FILES" ]; then
          echo "k8s_files_found=true" >> $GITHUB_OUTPUT
          echo "files_list<<EOF" >> $GITHUB_OUTPUT
          echo "$K8S_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Export for script use
          echo "CHANGED_K8S_FILES<<EOF" >> $GITHUB_ENV
          echo "$K8S_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "k8s_files_found=false" >> $GITHUB_OUTPUT
          echo "No changed Kubernetes YAML files found"
        fi
    
    - name: Validate changed Kubernetes YAML files
      if: steps.changed-k8s-files.outputs.k8s_files_found == 'true'
      id: kubeval-check
      run: |
        echo "üîç Validating changed Kubernetes YAML files with kubeval..."
        
        VALIDATION_RESULTS=""
        VALID_FILES=()
        INVALID_FILES=()
        TOTAL_FILES=0
        
        # Read files from the environment variable
        while IFS= read -r file; do
          if [ -n "$file" ] && [ -f "$file" ]; then
            TOTAL_FILES=$((TOTAL_FILES + 1))
            echo ""
            echo "üìÑ Validating changed file: $file"
            echo "----------------------------------------"
            
            # Run kubeval on the file
            if kubeval "$file" 2>&1; then
              echo "‚úÖ VALID: $file"
              VALID_FILES+=("$file")
            else
              echo "‚ùå INVALID: $file"
              INVALID_FILES+=("$file")
            fi
          fi
        done <<< "$CHANGED_K8S_FILES"
        
        # Export results
        echo "TOTAL_K8S_FILES=$TOTAL_FILES" >> $GITHUB_ENV
        echo "VALID_K8S_FILES=${#VALID_FILES[@]}" >> $GITHUB_ENV
        echo "INVALID_K8S_FILES=${#INVALID_FILES[@]}" >> $GITHUB_ENV
        
        # Export invalid files list
        if [ ${#INVALID_FILES[@]} -gt 0 ]; then
          echo "INVALID_FILES_LIST<<EOF" >> $GITHUB_ENV
          printf '%s\n' "${INVALID_FILES[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        # Export valid files list
        if [ ${#VALID_FILES[@]} -gt 0 ]; then
          echo "VALID_FILES_LIST<<EOF" >> $GITHUB_ENV
          printf '%s\n' "${VALID_FILES[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi
        
        echo ""
        echo "üìä VALIDATION SUMMARY (Changed Files Only):"
        echo "=========================================="
        echo "Total changed Kubernetes YAML files: $TOTAL_FILES"
        echo "Valid files: ${#VALID_FILES[@]}"
        echo "Invalid files: ${#INVALID_FILES[@]}"
        
        # Set exit code
        if [ ${#INVALID_FILES[@]} -gt 0 ]; then
          exit 1
        fi
      continue-on-error: true
    
    - name: Set PR variables for kubeval
      id: kubeval-pr-info
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "head_sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          echo "is_pr=true" >> $GITHUB_OUTPUT
        else
          echo "head_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "is_pr=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create PR comment for valid K8s files
      if: env.INVALID_K8S_FILES == '0' && env.VALID_K8S_FILES != '0' && steps.kubeval-pr-info.outputs.is_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## ‚öì Kubernetes YAML Validation - PASSED ‚úÖ
          
          All changed Kubernetes YAML files are valid and conform to the Kubernetes API schema!
          
          **Summary:**
          - üìÑ Changed K8s files validated: ${process.env.TOTAL_K8S_FILES}
          - ‚úÖ Valid files: ${process.env.VALID_K8S_FILES}
          - ‚ùå Invalid files: 0
          
          **Validated changed files:**
          ${process.env.VALID_FILES_LIST.split('\n').map(f => f.trim()).filter(f => f).map(f => `- \`${f}\``).join('\n')}
          
          Your Kubernetes manifests are ready for deployment! üöÄ`;
          
          await github.rest.issues.createComment({
            issue_number: ${{ steps.kubeval-pr-info.outputs.pr_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Create PR comment for invalid K8s files
      if: env.INVALID_K8S_FILES != '0' && steps.kubeval-pr-info.outputs.is_pr == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const invalidFiles = process.env.INVALID_FILES_LIST || '';
          const invalidFilesList = invalidFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n');
          
          const validFiles = process.env.VALID_FILES_LIST || '';
          const validFilesList = validFiles.split('\n').filter(f => f.trim()).map(f => `- \`${f}\``).join('\n');
          
          const comment = `## ‚ö†Ô∏è Kubernetes YAML Validation - FAILED ‚ùå
          
          **Validation Error:** Some changed Kubernetes YAML files failed validation against the Kubernetes API schema!
          
          **Summary:**
          - üìÑ Changed K8s files checked: ${process.env.TOTAL_K8S_FILES}
          - ‚úÖ Valid files: ${process.env.VALID_K8S_FILES}
          - ‚ùå **Invalid files: ${process.env.INVALID_K8S_FILES}**
          
          **‚ùå Invalid changed files:**
          ${invalidFilesList}
          
          ${validFilesList ? `**‚úÖ Valid changed files:**\n${validFilesList}\n` : ''}
          
          **üîß How to fix:**
          1. Review the kubeval output in the action logs for specific validation errors
          2. Check for typos in field names, incorrect indentation, or invalid values
          3. Ensure your YAML follows the Kubernetes API schema
          4. Common issues:
             - Incorrect \`apiVersion\` for your Kubernetes cluster
             - Missing required fields
             - Invalid resource specifications
          5. Fix the issues and push your changes
          
          **üìö Resources:**
          - [Kubernetes API Reference](https://kubernetes.io/docs/reference/)
          - [Kubeval Documentation](https://github.com/instrumenta/kubeval)
          
          **üîí Consider blocking merge until validation passes.**`;
          
          await github.rest.issues.createComment({
            issue_number: ${{ steps.kubeval-pr-info.outputs.pr_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Create check for K8s validation results
      if: steps.changed-k8s-files.outputs.k8s_files_found == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const conclusion = process.env.INVALID_K8S_FILES === '0' ? 'success' : 'failure';
          const title = process.env.INVALID_K8S_FILES === '0' 
            ? 'All changed Kubernetes YAML files are valid' 
            : 'Changed Kubernetes YAML validation failed';
          const summary = process.env.INVALID_K8S_FILES === '0'
            ? `Successfully validated ${process.env.VALID_K8S_FILES} changed Kubernetes YAML files`
            : `Found ${process.env.INVALID_K8S_FILES} invalid Kubernetes YAML files out of ${process.env.TOTAL_K8S_FILES} changed files`;
          
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Kubernetes YAML Validation',
            head_sha: '${{ steps.kubeval-pr-info.outputs.head_sha }}',
            status: 'completed',
            conclusion: conclusion,
            output: {
              title: title,
              summary: summary,
              text: process.env.INVALID_K8S_FILES === '0' 
                ? `Valid changed files:\n${process.env.VALID_FILES_LIST || 'None'}`
                : `Invalid changed files:\n${process.env.INVALID_FILES_LIST || 'None'}\n\nValid changed files:\n${process.env.VALID_FILES_LIST || 'None'}`
            }
          });
          
          if (process.env.INVALID_K8S_FILES !== '0') {
            core.setFailed(`Found ${process.env.INVALID_K8S_FILES} invalid changed Kubernetes YAML files`);
          }
    
    - name: Handle no changed K8s files case
      if: steps.changed-k8s-files.outputs.k8s_files_found == 'false'
      uses: actions/github-script@v7
      with:
        script: |
          // Only comment if this is a pull request
          if ('${{ steps.kubeval-pr-info.outputs.is_pr }}' === 'true') {
            const comment = `## ‚öì Kubernetes YAML Validation - NO CHANGED FILES ‚ÑπÔ∏è
            
            No Kubernetes YAML files were changed in this pull request.
            
            **Search criteria for changed files:**
            - Files with paths containing: k8s, kubernetes, manifests, deployment, service, ingress, configmap, secret
            - Files containing \`apiVersion:\` or \`kind:\` fields
            
            The validation only checks files that are added, modified, or renamed in the PR.`;
            
            await github.rest.issues.createComment({
              issue_number: ${{ steps.kubeval-pr-info.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
          
          // Create a neutral check run
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Kubernetes YAML Validation',
            head_sha: '${{ steps.kubeval-pr-info.outputs.head_sha }}',
            status: 'completed',
            conclusion: 'neutral',
            output: {
              title: 'No changed Kubernetes YAML files to validate',
              summary: 'No Kubernetes YAML files changed in this PR.',
              text: 'This PR does not contain any changes to files that appear to be Kubernetes manifests.'
            }
          });
    
    - name: Kubeval Summary
      run: |
        echo "=== Kubernetes YAML Validation Summary ==="
        if [ "${{ steps.changed-k8s-files.outputs.k8s_files_found }}" = "true" ]; then
          echo "Total changed K8s files: ${TOTAL_K8S_FILES:-0}"
          echo "Valid files: ${VALID_K8S_FILES:-0}"
          echo "Invalid files: ${INVALID_K8S_FILES:-0}"
          echo "Validation result: ${{ env.INVALID_K8S_FILES == '0' && 'PASSED' || 'FAILED' }}"
          
          if [ "${INVALID_K8S_FILES:-0}"